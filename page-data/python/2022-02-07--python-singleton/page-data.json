{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/2022-02-07--python-singleton/","result":{"data":{"site":{"siteMetadata":{"title":"주 1회 작성하는 개발 블로그","author":"JinhyeongKim","siteUrl":"https://bnt10.github.io","comment":{"disqusShortName":"bnt10-github-io","utterances":"JinHyongKim/blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"18fa2100-26e3-55be-b0c5-4b2c64f6a598","excerpt":"1. Singleton 현재 실행중인 프로세스에서 하나의 인스터스를 메모리에 할당하여 유일한 단일객체로서 사용하는 디자인패턴을 말한다. 2. 공부한 이유 현재 개발중인 게이트웨이로서의 Proxy서버에 대해서 다수의 node서버 접속시 사용할 전역 Proxy서버 객체 및\n공유된 리소스에 대한 말단 노드간의 동시성 제어가 필요했습니다. 3. Python에서 Singleton 구현 방식 및 예시 생각보다 python에서 싱글턴을 구현하는 방식들이 다양합니다.\n제가 이번에 구현한 방식은 type…","html":"<h3>1. Singleton</h3>\n<p>현재 실행중인 프로세스에서 하나의 인스터스를 메모리에 할당하여 유일한 단일객체로서 사용하는 디자인패턴을 말한다.</p>\n<h3>2. 공부한 이유</h3>\n<p>현재 개발중인 게이트웨이로서의 Proxy서버에 대해서 다수의 node서버 접속시 사용할 전역 Proxy서버 객체 및\n공유된 리소스에 대한 말단 노드간의 동시성 제어가 필요했습니다.</p>\n<h3>3. Python에서 Singleton 구현 방식 및 예시</h3>\n<p>생각보다 python에서 싱글턴을 구현하는 방식들이 다양합니다.\n제가 이번에 구현한 방식은 type 통한 metaclass 생성을 통해서 싱글톤을 구현 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    # 인스턴스가 저장될 속성\n    __instances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    # __call__ 클래스에서 생성된 인스턴스를 호출할때 동작\n    def <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        # 인스턴스 생성 여부 확인\n        <span class=\"token keyword\">if</span> cls not <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>__instances<span class=\"token operator\">:</span>\n            # 인스턴스 미생성 경우 인스턴스 생성하여 저장\n            cls<span class=\"token punctuation\">.</span>__instances<span class=\"token punctuation\">[</span>cls<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        #인스턴스가 존재하는경우 기존 생성 인스턴스 전달\n        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>__instances<span class=\"token punctuation\">[</span>cls<span class=\"token punctuation\">]</span>\n\n# 메타클래스로 Singleton으로 생성\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    # 인스턴스가 저장될 속성\n    __instances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    # __call__ 클래스에서 생성된 인스턴스를 호출할때 동작\n    def <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        # 인스턴스 생성 여부 확인\n        <span class=\"token keyword\">if</span> cls not <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>__instances<span class=\"token operator\">:</span>\n            # 인스턴스 미생성 경우 인스턴스 생성하여 저장\n            cls<span class=\"token punctuation\">.</span>__instances<span class=\"token punctuation\">[</span>cls<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        #인스턴스가 존재하는경우 기존 생성 인스턴스 전달\n        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>__instances<span class=\"token punctuation\">[</span>cls<span class=\"token punctuation\">]</span>\n    def <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\n            cls<span class=\"token punctuation\">.</span>__instances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        except KeyError<span class=\"token operator\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> KeyError<span class=\"token punctuation\">)</span>\n\n# 메타클래스로 Singleton으로 생성\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>metaclass<span class=\"token operator\">=</span>Singleton<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    def <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        self<span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> server\n\n    def <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\n        self<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        del self\n    def <span class=\"token function\">get_server</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>server\n    #<span class=\"token operator\">...</span>\n\nsshNode <span class=\"token operator\">=</span> <span class=\"token function\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ssh'</span><span class=\"token punctuation\">)</span>\ntelnetNode <span class=\"token operator\">=</span> <span class=\"token function\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'telnet'</span><span class=\"token punctuation\">)</span>\n\n#초기화 값 확인\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sshNode<span class=\"token punctuation\">.</span><span class=\"token function\">get_server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> telnetNode<span class=\"token punctuation\">.</span><span class=\"token function\">get_server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n#동일 인스턴스 확인\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Is it the same instance?'</span><span class=\"token punctuation\">,</span> sshNode is telnetNode<span class=\"token punctuation\">)</span>\n\n#인스턴스 초기화'\nsshNode<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsshNode <span class=\"token operator\">=</span> <span class=\"token function\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new ssh'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sshNode<span class=\"token punctuation\">.</span><span class=\"token function\">get_server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/python/2022-02-07--python-singleton/#1-singleton\">1. Singleton</a></li>\n<li><a href=\"/python/2022-02-07--python-singleton/#2-%EA%B3%B5%EB%B6%80%ED%95%9C-%EC%9D%B4%EC%9C%A0\">2. 공부한 이유</a></li>\n<li><a href=\"/python/2022-02-07--python-singleton/#3-python%EC%97%90%EC%84%9C-singleton-%EA%B5%AC%ED%98%84-%EB%B0%A9%EC%8B%9D-%EB%B0%8F-%EC%98%88%EC%8B%9C\">3. Python에서 Singleton 구현 방식 및 예시</a></li>\n</ul>","frontmatter":{"title":"Python - Singleton class","date":"February 07, 2022"}}},"pageContext":{"slug":"/python/2022-02-07--python-singleton/","previous":{"fields":{"slug":"/python/2022-02-06--python-socket/"},"frontmatter":{"title":"Python - socket"}},"next":{"fields":{"slug":"/react/2022-05-14--react-tutorial/"},"frontmatter":{"title":"React - Tutorial 문서정리"}}}},"staticQueryHashes":["2486386679","3128451518"]}