{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Python-socket","result":{"data":{"markdownRemark":{"id":"07b3b6bd-923e-518f-86a6-2ab13060cdfc","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-socket-%EC%A0%95%EC%9D%98\">1. Socket 정의</a></li>\n<li><a href=\"#2-python%EC%97%90%EC%84%9C-socket%EA%B5%AC%ED%98%84\">2. Python에서 Socket구현</a></li>\n</ul>\n</div>\n<h3 id=\"1-socket-정의\" style=\"position:relative;\"><a href=\"#1-socket-%EC%A0%95%EC%9D%98\" aria-label=\"1 socket 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Socket 정의</h3>\n<p>소캣이란 네트워크를 경유하는 프로세스 간 통신의 종착점이다\n주로 소켓통신이 필요할때는 http 프로토콜 처럼 단방향통신이 아니라 프로세스간 양방향 통신이 필요할때 사용하면 된다.\n소켓에서 같은 ip와 port 번호를 가진 서버와 클라이언트는 소켓을 통한 양방향 통신이 가능하기 때문이다.</p>\n<h3 id=\"2-python에서-socket구현\" style=\"position:relative;\"><a href=\"#2-python%EC%97%90%EC%84%9C-socket%EA%B5%AC%ED%98%84\" aria-label=\"2 python에서 socket구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Python에서 Socket구현</h3>\n<p>서버와 클라이언트 사이에 통신을 구현해 봅니다.\n서버와 클라이언트간의 메시지를 전달할 수 있도록 작성해봅니다.</p>\n<p>serverSocket.py 를 먼저 구현해봅니다. </p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`import socket\nfrom _thread import *\n\n# 서버에 접속한 클라이언트 목록\nclient_sockets = [] \n# 서버 IP 및 열어줄 포트\nHOST = '127.0.0.1'\nPORT = 9998\n\n# 쓰레드에서 실행되는 코드입니다.\n# 접속한 클라이언트마다 새로운 쓰레드가 생성되어 통신을 하게 됩니다.\ndef threaded(client_socket, addr):\n    print('>> Connected by :', addr[0], ':', addr[1])\n\n    # 클라이언트가 접속을 끊을 때 까지 반복합니다.\n    while True:\n        try:\n            # 데이터가 수신되면 클라이언트에 다시 전송합니다.(에코)\n            data = client_socket.recv(1024)\n            if not data:\n                print('>> Disconnected by ' + addr[0], ':', addr[1])\n                break\n\n            print('>> Received from ' + addr[0], ':', addr[1], data.decode())\n\n            # 서버에 접속한 클라이언트들에게 채팅 보내기\n            # 메세지를 보낸 본인을 제외한 서버에 접속한 클라이언트에게 메세지 보내기\n            for client in client_sockets :\n                if client != client_socket :\n                    client.send(data)\n\n        except ConnectionResetError as e:\n            print('>> Disconnected by ' + addr[0], ':', addr[1])\n            break\n\n    if client_socket in client_sockets :\n        client_sockets.remove(client_socket)\n        print('remove client list : ',len(client_sockets))\n\n    client_socket.close()\n\n#socket server start\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n    \n    server_socket.bind((HOST, PORT))\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.listen() \n    \n    try:\n        while True:\n            print('connet wait')\n            #서버에서 클라이언트의 연결을 받아들입니다.\n            client_socket, addr = server_socket.accept()\n            #추가된 클라언트 목록을 추가합니다.\n            client_sockets.append(client_socket)\n            #새로운 스레드로 할당합니다.\n            start_new_thread(threaded, (client_socket, addr))\n            #현재 연결되 clinet의 수\n            print(&quot;client count: &quot;, len(client_sockets))\n            \n    except Exception as e :\n        print ('error: ',e)\n    finally:\n        server_socket.close()`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> socket\nfrom _thread <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n# 서버에 접속한 클라이언트 목록\nclient_sockets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> \n# 서버 <span class=\"token constant\">IP</span> 및 열어줄 포트\n<span class=\"token constant\">HOST</span> <span class=\"token operator\">=</span> <span class=\"token string\">'127.0.0.1'</span>\n<span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">9998</span>\n\n# 쓰레드에서 실행되는 코드입니다<span class=\"token punctuation\">.</span>\n# 접속한 클라이언트마다 새로운 쓰레드가 생성되어 통신을 하게 됩니다<span class=\"token punctuation\">.</span>\ndef <span class=\"token function\">threaded</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>> Connected by :'</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    # 클라이언트가 접속을 끊을 때 까지 반복합니다<span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">while</span> True<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\n            # 데이터가 수신되면 클라이언트에 다시 전송합니다<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>에코<span class=\"token punctuation\">)</span>\n            data <span class=\"token operator\">=</span> client_socket<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> not data<span class=\"token operator\">:</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>> Disconnected by '</span> <span class=\"token operator\">+</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>> Received from '</span> <span class=\"token operator\">+</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            # 서버에 접속한 클라이언트들에게 채팅 보내기\n            # 메세지를 보낸 본인을 제외한 서버에 접속한 클라이언트에게 메세지 보내기\n            <span class=\"token keyword\">for</span> client <span class=\"token keyword\">in</span> client_sockets <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> client <span class=\"token operator\">!=</span> client_socket <span class=\"token operator\">:</span>\n                    client<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n        except ConnectionResetError <span class=\"token keyword\">as</span> e<span class=\"token operator\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>> Disconnected by '</span> <span class=\"token operator\">+</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">if</span> client_socket <span class=\"token keyword\">in</span> client_sockets <span class=\"token operator\">:</span>\n        client_sockets<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'remove client list : '</span><span class=\"token punctuation\">,</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>client_sockets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    client_socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n#socket server start\n<span class=\"token keyword\">with</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token constant\">AF_INET</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span><span class=\"token constant\">SOCK_STREAM</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> server_socket<span class=\"token operator\">:</span>\n    \n    <span class=\"token function\">server_socket</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HOST</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    server_socket<span class=\"token punctuation\">.</span><span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token constant\">SOL_SOCKET</span><span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span><span class=\"token constant\">SO_REUSEADDR</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    server_socket<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    \n    <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">while</span> True<span class=\"token operator\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connet wait'</span><span class=\"token punctuation\">)</span>\n            #서버에서 클라이언트의 연결을 받아들입니다<span class=\"token punctuation\">.</span>\n            client_socket<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server_socket<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            #추가된 클라언트 목록을 추가합니다<span class=\"token punctuation\">.</span>\n            client_sockets<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">)</span>\n            #새로운 스레드로 할당합니다<span class=\"token punctuation\">.</span>\n            <span class=\"token function\">start_new_thread</span><span class=\"token punctuation\">(</span>threaded<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            #현재 연결되 clinet의 수\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client count: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>client_sockets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            \n    except Exception <span class=\"token keyword\">as</span> e <span class=\"token operator\">:</span>\n        <span class=\"token function\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'error: '</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span>\n    finally<span class=\"token operator\">:</span>\n        server_socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음으로 클라언트를 clientSocket.py를 작성해봅니다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`from _thread import *\nimport socket\n\nHOST = '127.0.0.1'\nPORT = 9998\n\ndef recv_data(client_socket) :\n    while True :\n        data = client_socket.recv(1024)\n        print(&quot;recive : &quot;,repr(data.decode()))\n\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:\n    \n    client_socket.connect((HOST, PORT))\n\n    try:\n        print('access server!')\n        start_new_thread(recv_data, (client_socket,))\n        while True:\n            message = input('')\n            if message == 'quit':\n                close_data = message\n                break\n            client_socket.send(message.encode())\n            \n    except Exception as e :\n        print ('error: ',e)\n    finally:\n        client_socket.close()`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> _thread <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> socket\n\nHOST <span class=\"token operator\">=</span> <span class=\"token string\">'127.0.0.1'</span>\nPORT <span class=\"token operator\">=</span> <span class=\"token number\">9998</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recv_data</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span> <span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> client_socket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recive : \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> client_socket<span class=\"token punctuation\">:</span>\n    \n    client_socket<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HOST<span class=\"token punctuation\">,</span> PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'access server!'</span><span class=\"token punctuation\">)</span>\n        start_new_thread<span class=\"token punctuation\">(</span>recv_data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            message <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> message <span class=\"token operator\">==</span> <span class=\"token string\">'quit'</span><span class=\"token punctuation\">:</span>\n                close_data <span class=\"token operator\">=</span> message\n                <span class=\"token keyword\">break</span>\n            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'error: '</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        client_socket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>참고\n<a href=\"https://stickode.tistory.com/225\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stickode.tistory.com/225</a></p>","fields":{"slug":"/posts/Python-socket","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2022-02-06","description":"Python socket 통신 정리","tags":["python"],"title":"Python - socket","socialImage":{"publicURL":"/static/19697c6372e8ee7cd4727388756495de/gatsby_icon.png"}}}},"pageContext":{"slug":"/posts/Python-socket"}},"staticQueryHashes":["1477167549","251939775","401334301"]}