{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Python-Singleton class","result":{"data":{"markdownRemark":{"id":"68bd40e8-be48-54a8-aea0-3e90df572ee8","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-singleton\">1. Singleton</a></li>\n<li><a href=\"#2-%EA%B3%B5%EB%B6%80%ED%95%9C-%EC%9D%B4%EC%9C%A0\">2. 공부한 이유</a></li>\n<li><a href=\"#3-python%EC%97%90%EC%84%9C-singleton-%EA%B5%AC%ED%98%84-%EB%B0%A9%EC%8B%9D-%EB%B0%8F-%EC%98%88%EC%8B%9C\">3. Python에서 Singleton 구현 방식 및 예시</a></li>\n</ul>\n</div>\n<h3 id=\"1-singleton\" style=\"position:relative;\"><a href=\"#1-singleton\" aria-label=\"1 singleton permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Singleton</h3>\n<p>현재 실행중인 프로세스에서 하나의 인스터스를 메모리에 할당하여 유일한 단일객체로서 사용하는 디자인패턴을 말한다.</p>\n<h3 id=\"2-공부한-이유\" style=\"position:relative;\"><a href=\"#2-%EA%B3%B5%EB%B6%80%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"2 공부한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 공부한 이유</h3>\n<p>현재 개발중인 게이트웨이로서의 Proxy서버에 대해서 다수의 node서버 접속시 사용할 전역 Proxy서버 객체 및\n공유된 리소스에 대한 말단 노드간의 동시성 제어가 필요했습니다.</p>\n<h3 id=\"3-python에서-singleton-구현-방식-및-예시\" style=\"position:relative;\"><a href=\"#3-python%EC%97%90%EC%84%9C-singleton-%EA%B5%AC%ED%98%84-%EB%B0%A9%EC%8B%9D-%EB%B0%8F-%EC%98%88%EC%8B%9C\" aria-label=\"3 python에서 singleton 구현 방식 및 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Python에서 Singleton 구현 방식 및 예시</h3>\n<p>생각보다 python에서 싱글턴을 구현하는 방식들이 다양합니다.\n제가 이번에 구현한 방식은 type 통한 metaclass 생성을 통해서 싱글톤을 구현 해보겠습니다.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`class Singleton(type):   \n    # 인스턴스가 저장될 속성\n    __instances = {}      \n    # __call__ 클래스에서 생성된 인스턴스를 호출할때 동작\n    def __call__(cls, *args, **kwargs):   \n        # 인스턴스 생성 여부 확인\n        if cls not in cls.__instances: \n            # 인스턴스 미생성 경우 인스턴스 생성하여 저장    \n            cls.__instances[cls] = super().__call__(*args, **kwargs) \n        #인스턴스가 존재하는경우 기존 생성 인스턴스 전달\n        return cls.__instances[cls]        \n\n# 메타클래스로 Singleton으로 생성\nclass Proxy(metaclass=Singleton):    \n    def __init__(self, server):\n        self.server = server\n\n    def get_server(self):\n        \n        return self.server \n\n    \nsshNode = Proxy('ssh')\ntelnetNode = Proxy('telnet')\n\n#초기화 값 확인\nprint(sshNode.get_server(), telnetNode.get_server())\n\n#동일 인스턴스 확인\nprint('Is it the same instance?', sshNode is telnetNode)`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"copy\"\n              >\n                <svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>   \n    # 인스턴스가 저장될 속성\n    __instances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>      \n    # __call__ 클래스에서 생성된 인스턴스를 호출할때 동작\n    def <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>   \n        # 인스턴스 생성 여부 확인\n        <span class=\"token keyword\">if</span> cls not <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>__instances<span class=\"token operator\">:</span> \n            # 인스턴스 미생성 경우 인스턴스 생성하여 저장    \n            cls<span class=\"token punctuation\">.</span>__instances<span class=\"token punctuation\">[</span>cls<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span> \n        #인스턴스가 존재하는경우 기존 생성 인스턴스 전달\n        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>__instances<span class=\"token punctuation\">[</span>cls<span class=\"token punctuation\">]</span>        \n\n# 메타클래스로 Singleton으로 생성\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>metaclass<span class=\"token operator\">=</span>Singleton<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>    \n    def <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        self<span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> server\n\n    def <span class=\"token function\">get_server</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        \n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>server \n\n    \nsshNode <span class=\"token operator\">=</span> <span class=\"token function\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ssh'</span><span class=\"token punctuation\">)</span>\ntelnetNode <span class=\"token operator\">=</span> <span class=\"token function\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'telnet'</span><span class=\"token punctuation\">)</span>\n\n#초기화 값 확인\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sshNode<span class=\"token punctuation\">.</span><span class=\"token function\">get_server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> telnetNode<span class=\"token punctuation\">.</span><span class=\"token function\">get_server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n#동일 인스턴스 확인\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Is it the same instance?'</span><span class=\"token punctuation\">,</span> sshNode is telnetNode<span class=\"token punctuation\">)</span></code></pre></div>","fields":{"slug":"/posts/Python-Singleton class","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2022-02-07","description":"Python singleton class 만들기","tags":["python"],"title":"Python - Singleton class","socialImage":{"publicURL":"/static/19697c6372e8ee7cd4727388756495de/gatsby_icon.png"}}}},"pageContext":{"slug":"/posts/Python-Singleton class"}},"staticQueryHashes":["1477167549","251939775","401334301"]}