{"version":3,"sources":["webpack:///./src/pages/about copy.jsx"],"names":["MdEditor","use","saveToFile","start","mdParser","MarkdownIt","Demo","props","handleRenderHtml","text","render","handleEditorChange","it","event","setState","value","handleImageUpload","file","a","options","id","startIn","_saveFile","saveFile","window","showDirectoryPicker","console","log","imagehandle","Promise","resolve","reader","FileReader","readyState","onload","data","target","result","readAsArrayBuffer","then","res","onCustomImageUpload","reject","readAsDataURL","url","handleGetMdValue","mdEditor","alert","getMdValue","handleGetHtmlValue","getHtmlValue","handleSetValue","prompt","renderHTML","bind","state","React","createElement","ReactMarkdown","source","className","onClick","this","style","marginTop","ref","node","undefined","height","width","config","view","menu","md","html","fullScreen","hideMenu","table","maxRow","maxCol","imageUrl","syncScrollMode","onChange","onImageUpload","Component"],"mappings":"mSAYAA,IAASC,IAAIC,IAAY,CACvBC,MAAO,IAET,IAAMC,EAAW,IAAIC,IACAC,E,YAEnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAOFC,iBAAmB,SAAAC,GAAI,OAAIL,EAASM,OAAOD,IARxB,EAUnBE,mBAAqB,SAACC,EAAIC,GAExB,EAAKC,SAAS,CACZC,MAAOH,EAAGH,QAbK,EAiBnBO,kBAjBmB,uCAiBC,WAAMC,GAAN,mBAAAC,EAAA,sGAEZC,EAAU,CACdC,GAAI,MACJC,QAAS,SAILC,EARY,+BAAAJ,EAAA,MAQA,WAAMK,GAAN,SAAAL,EAAA,+EAIUM,OAAOC,oBAAoBN,GAJrC,2DAMLI,GANK,uDASdG,QAAQC,IAAR,MATc,yDARA,sDAqBZC,EAAc,IAAIC,SAAQ,SAAAC,GAC9B,IAAMC,EAAS,IAAIC,WACnBN,QAAQC,IAAII,EAAOE,YACnBF,EAAOG,OAAS,SAAAC,GACdL,EAAQK,EAAKC,OAAOC,SAGtBN,EAAOO,kBAAkBrB,MACxBsB,KARiB,uCAQZ,WAAMC,GAAN,SAAAtB,EAAA,sEACOI,EAAUkB,GADjB,mFARY,uDArBF,kBAiCXZ,GAjCW,2CAjBD,wDAqDnBa,oBAAsB,SAAA5B,GAEpB,OADAa,QAAQC,IAAI,sBAAuBd,GAC5B,IAAIgB,SAAQ,SAACC,EAASY,GAC3B,IAAMX,EAAS,IAAIC,WACnBD,EAAOG,OAAS,SAAAC,GACdL,EAAQK,EAAKC,OAAOC,SAEtBN,EAAOY,cAAc1B,MACrBS,QAAQC,IAAII,GACZD,EAAQ,CAAEc,IAAK,eA9DA,EAkEnBC,iBAAmB,WACb,EAAKC,UACPC,MAAM,EAAKD,SAASE,eApEL,EAwEnBC,mBAAqB,WACf,EAAKH,UACPC,MAAM,EAAKD,SAASI,iBA1EL,EA8EnBC,eAAiB,WACf,IAAM1C,EAAOe,OAAO4B,OAAO,WAC3B,EAAKtC,SAAS,CACZC,MAAON,KA/ET,EAAK4C,WAAa,EAAKA,WAAWC,KAAhB,gBAElB,EAAKC,MAAQ,CACXxC,MAAO,WALQ,E,4CAqFnBsC,WAAA,SAAW5C,GACT,OAAO+C,IAAMC,cAAcC,IAAe,CACxCC,OAAQlD,K,EAIZC,OAAA,WAAU,IAAD,OACP,OACE,yBAAKkD,UAAU,aACb,yBAAKA,UAAU,OACb,4BAAQC,QAASC,KAAKjB,kBAAtB,cACA,4BAAQgB,QAASC,KAAKb,oBAAtB,gBACA,4BAAQY,QAASC,KAAKX,gBAAtB,aAEF,yBAAKS,UAAU,cAAcG,MAAO,CAAEC,UAAW,SAC/C,kBAAC,IAAD,CACEC,IAAK,SAAAC,GAAI,OAAK,EAAKpB,SAAWoB,QAAQC,GACtCJ,MAAO,CAAEK,OAAQ,QAASC,MAAO,QACjChB,WAAYS,KAAKtD,iBACjB8D,OAAQ,CACNC,KAAM,CACJC,MAAM,EACNC,IAAI,EACJC,MAAM,EACNC,YAAY,EACZC,UAAU,GAEZC,MAAO,CACLC,OAAQ,EACRC,OAAQ,GAEVC,SAAU,+CACVC,eAAgB,CAAC,kBAAmB,oBAEtCC,SAAUpB,KAAKnD,mBACfwE,cAAerB,KAAK9C,uB,GA1HEwC,IAAM4B,WAAnB9E,EACZwC,cAAWqB","file":"component---src-pages-about-copy-jsx-880706a9bfd8ee70cebf.js","sourcesContent":["// import react, react-markdown-editor-lite, and a markdown parser you like\nimport React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport MarkdownIt from 'markdown-it'\n\n// import style manually\nimport 'react-markdown-editor-lite/lib/index.css'\nimport ReactMarkdown from 'react-markdown'\nimport MdEditor, { Plugins } from 'react-markdown-editor-lite'\n\nimport saveToFile from '../utils/editor-plugin'\n\nMdEditor.use(saveToFile, {\n  start: 2,\n})\nconst mdParser = new MarkdownIt(/* Markdown-it options */)\nexport default class Demo extends React.Component {\n  static mdEditor = undefined\n  constructor(props) {\n    super(props)\n    this.renderHTML = this.renderHTML.bind(this)\n\n    this.state = {\n      value: '# Hello',\n    }\n  }\n  handleRenderHtml = text => mdParser.render(text)\n\n  handleEditorChange = (it, event) => {\n    // console.log('handleEditorChange', it.text, it.html, event);\n    this.setState({\n      value: it.text,\n    })\n  }\n\n  handleImageUpload = async file => {\n    const directoryHandle = `/Users/gimjinhyeong/bnt10_blog/my-blog/`\n    const options = {\n      id: 'foo',\n      startIn: 'Users',\n    }\n\n    //Todo await로 대체 할 수 없는가\n    const _saveFile = async saveFile => {\n      // console.log(saveFile)\n      // return saveFile\n      try {\n        const dirHandle = await window.showDirectoryPicker(options)\n        if (dirHandle) {\n          return saveFile\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n\n    const imagehandle = new Promise(resolve => {\n      const reader = new FileReader()\n      console.log(reader.readyState)\n      reader.onload = data => {\n        resolve(data.target.result)\n      }\n\n      reader.readAsArrayBuffer(file)\n    }).then(async res => {\n      return await _saveFile(res)\n    })\n\n    return imagehandle\n  }\n\n  onCustomImageUpload = event => {\n    console.log('onCustomImageUpload', event)\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onload = data => {\n        resolve(data.target.result)\n      }\n      reader.readAsDataURL(file)\n      console.log(reader)\n      resolve({ url: 'result' })\n    })\n  }\n\n  handleGetMdValue = () => {\n    if (this.mdEditor) {\n      alert(this.mdEditor.getMdValue())\n    }\n  }\n\n  handleGetHtmlValue = () => {\n    if (this.mdEditor) {\n      alert(this.mdEditor.getHtmlValue())\n    }\n  }\n\n  handleSetValue = () => {\n    const text = window.prompt('Content')\n    this.setState({\n      value: text,\n    })\n  }\n\n  renderHTML(text) {\n    return React.createElement(ReactMarkdown, {\n      source: text,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"demo-wrap\">\n        <nav className=\"nav\">\n          <button onClick={this.handleGetMdValue}>getMdValue</button>\n          <button onClick={this.handleGetHtmlValue}>getHtmlValue</button>\n          <button onClick={this.handleSetValue}>setValue</button>\n        </nav>\n        <div className=\"editor-wrap\" style={{ marginTop: '30px' }}>\n          <MdEditor\n            ref={node => (this.mdEditor = node || undefined)}\n            style={{ height: '700px', width: '100%' }}\n            renderHTML={this.handleRenderHtml}\n            config={{\n              view: {\n                menu: true,\n                md: true,\n                html: true,\n                fullScreen: true,\n                hideMenu: true,\n              },\n              table: {\n                maxRow: 5,\n                maxCol: 6,\n              },\n              imageUrl: 'https://octodex.github.com/images/minion.png',\n              syncScrollMode: ['leftFollowRight', 'rightFollowLeft'],\n            }}\n            onChange={this.handleEditorChange}\n            onImageUpload={this.handleImageUpload}\n            // onFocus={e => console.log('focus', e)}\n            // onBlur={e => console.log('blur', e)}\n            //onCustomImageUpload={this.onCustomImageUpload}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}