{"version":3,"sources":["webpack:///./src/components/elements/hr/index.jsx","webpack:///./src/components/post-title/index.jsx","webpack:///./src/components/post-date/index.jsx","webpack:///./src/components/post-container/index.jsx","webpack:///./src/components/post-navigator/index.jsx","webpack:///./src/hooks/useTocIntersectionObserver.tsx","webpack:///./src/components/toc/index.tsx","webpack:///./src/templates/blog-post.js"],"names":["Hr","className","PostTitle","title","PostDate","date","PostContainer","html","dangerouslySetInnerHTML","__html","PostNavigator","pageContext","previous","next","to","fields","slug","rel","frontmatter","useTocIntersectionObserver","setActiveId","content","headingElementsRef","useRef","useEffect","current","observer","IntersectionObserver","headings","reduce","map","headingElement","target","id","visibleHeadings","Object","keys","forEach","key","isIntersecting","push","getIndexFromId","headingElements","findIndex","heading","length","textContent","sortedVisibleHeadings","sort","a","b","rootMargin","Array","from","document","querySelectorAll","element","observe","disconnect","Toc","useState","activeId","tocRef","el","toLowerCase","classList","add","remove","ref","data","location","ScrollManager","post","markdownRemark","metaData","site","siteMetadata","comment","siteUrl","author","sponsor","disqusShortName","utterances","postTitle","description","excerpt","tableOfContents"],"mappings":"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","file":"component---src-templates-blog-post-js-5d9f901a77c40551ab90.js","sourcesContent":["import React from 'react'\n\nimport './index.scss'\n\nexport const Hr = () => <hr className=\"custom-hr\" />\n","import React from 'react'\n\nexport const PostTitle = ({ title }) => <h1>{title}</h1>\n","import React from 'react'\n\nimport './index.scss'\n\nexport const PostDate = ({ date }) => {\n  return <p className=\"post-date\">{date}</p>\n}\n","import React from 'react'\n\nexport const PostContainer = ({ html }) => (\n  <div dangerouslySetInnerHTML={{ __html: html }} />\n)\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport './index.scss'\n\nexport const PostNavigator = ({ pageContext }) => {\n  const { previous, next } = pageContext\n\n  return (\n    <ul className=\"navigator\">\n      <li>\n        {previous && (\n          <Link to={previous.fields.slug} rel=\"prev\">\n            ← {previous.frontmatter.title}\n          </Link>\n        )}\n      </li>\n      <li>\n        {next && (\n          <Link to={next.fields.slug} rel=\"next\">\n            {next.frontmatter.title} →\n          </Link>\n        )}\n      </li>\n    </ul>\n  )\n}\n","import { useEffect, useRef } from 'react'\n\nconst useTocIntersectionObserver = (\n  setActiveId: React.Dispatch<React.SetStateAction<string>>,\n  content: string\n) => {\n  const headingElementsRef = useRef<any>({})\n  useEffect(() => {\n    headingElementsRef.current = {}\n    const callback: IntersectionObserverCallback = headings => {\n      headingElementsRef.current = headings.reduce((map, headingElement) => {\n        if (headingElement.target.id) {\n          map[headingElement.target.id] = headingElement\n        }\n        return map\n      }, headingElementsRef.current)\n\n      const visibleHeadings: IntersectionObserverEntry[] = []\n      Object.keys(headingElementsRef.current).forEach(key => {\n        const headingElement = headingElementsRef.current[key]\n\n        if (headingElement.isIntersecting) visibleHeadings.push(headingElement)\n      })\n\n      const getIndexFromId = (id: string) =>\n        headingElements.findIndex(heading => heading.id === id)\n\n      if (visibleHeadings.length === 1) {\n        if (visibleHeadings[0].target.textContent) {\n          setActiveId(visibleHeadings[0].target.textContent)\n        }\n      } else if (visibleHeadings.length > 1) {\n        const sortedVisibleHeadings = visibleHeadings.sort(\n          (a, b) => getIndexFromId(a.target.id) - getIndexFromId(b.target.id)\n        )\n        if (sortedVisibleHeadings[0].target.textContent) {\n          setActiveId(sortedVisibleHeadings[0].target.textContent)\n        }\n      }\n    }\n\n    const observer = new IntersectionObserver(callback, {\n      rootMargin: '-0px 0px -45% 0px',\n    })\n\n    const headingElements = Array.from(\n      document.querySelectorAll('h1, h2, h3, h4')\n    )\n\n    headingElements.forEach(element => observer.observe(element))\n\n    return () => observer.disconnect()\n  }, [content])\n}\n\nexport default useTocIntersectionObserver\n","import React, { useEffect, useRef, useState } from 'react'\n\nimport useTocIntersectionObserver from '../../hooks/useTocIntersectionObserver'\nimport './index.scss'\ninterface Props {\n  content: string\n}\nexport const Toc = ({ content }: Props) => {\n  const [activeId, setActiveId] = useState('')\n  const tocRef = useRef<any>({})\n\n  useTocIntersectionObserver(setActiveId, content)\n  useEffect(() => {\n    const actvieToc = tocRef.current.querySelectorAll('a')\n    actvieToc.forEach((el: HTMLAnchorElement) => {\n      el.textContent?.toLowerCase() == activeId.toLowerCase()\n        ? el.classList.add('active')\n        : el.classList.remove('active')\n    })\n  }, [activeId])\n  return (\n    <div className=\"toc-wrap\">\n      <div\n        className=\"toc-content\"\n        ref={tocRef}\n        dangerouslySetInnerHTML={{ __html: content }}\n      ></div>\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { graphql } from 'gatsby'\n\nimport * as Elements from '../components/elements'\nimport { Layout } from '../layout'\nimport { Head } from '../components/head'\nimport { PostTitle } from '../components/post-title'\nimport { PostDate } from '../components/post-date'\nimport { PostContainer } from '../components/post-container'\nimport { SocialShare } from '../components/social-share'\nimport { SponsorButton } from '../components/sponsor-button'\nimport { Bio } from '../components/bio'\nimport { PostNavigator } from '../components/post-navigator'\nimport { Disqus } from '../components/disqus'\nimport { Toc } from '../components/toc'\nimport { ThemeSwitch } from '../components/theme-switch'\nimport { Utterances } from '../components/utterances'\nimport * as ScrollManager from '../utils/scroll'\nimport '../styles/code.scss'\nimport './index.scss'\nimport 'katex/dist/katex.min.css'\n\nexport default ({ data, pageContext, location }) => {\n  useEffect(() => {\n    ScrollManager.init()\n    return () => ScrollManager.destroy()\n  }, [])\n\n  const post = data.markdownRemark\n  const metaData = data.site.siteMetadata\n  const { title, comment, siteUrl, author, sponsor } = metaData\n  const { disqusShortName, utterances } = comment\n  const { title: postTitle, date } = post.frontmatter\n\n  return (\n    <>\n      <div className=\"post-content-wrap\">\n        <div className=\"post-content\">\n          <Layout\n            location={location}\n            title={title}\n            siteUrl={siteUrl}\n            author={author}\n          >\n            <div className=\"home-header-wrap\">\n              <Head title={postTitle} description={post.excerpt} />\n              <PostTitle title={postTitle} />\n              <ThemeSwitch />\n            </div>\n            <PostDate date={date} />\n            <PostContainer html={post.html} />\n            {/* <SocialShare title={postTitle} author={author} /> */}\n\n            <Elements.Hr />\n            <Bio />\n            <PostNavigator pageContext={pageContext} />\n            {/* {!!disqusShortName && (\n              <Disqus\n                post={post}\n                shortName={disqusShortName}\n                siteUrl={siteUrl}\n                slug={pageContext.slug}\n              />\n            )}\n            {!!utterances && <Utterances repo={utterances} />} */}\n          </Layout>\n        </div>\n        {post.tableOfContents && <Toc content={post.tableOfContents} />}\n      </div>\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n        siteUrl\n        comment {\n          disqusShortName\n          utterances\n        }\n        sponsor {\n          buyMeACoffeeId\n        }\n      }\n    }\n\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 280)\n      html\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`\n"],"sourceRoot":""}